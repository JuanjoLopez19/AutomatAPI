openapi: 3.0.0
x-stoplight:
  id: 9f72ypxmjsz1e
info:
  title: backendApi
  version: 0.5.0
  license:
    name: ''
    url: 'https://github.com/JuanjoLopez19/AutomatAPI'
  contact:
    email: juanjoselopez@usal.es
    name: ' Juanjo LÃ³pez'
    url: 'https://github.com/JuanjoLopez19/AutomatAPI'
  description: 'Backend API for the Final Degree Project called automatAPI, for the management of users and templates'
servers:
  - url: 'http://localhost:5000'
tags:
  - name: Create Templates
    description: Create Templates tag
  - name: Delete Templates
    description: Delete Templates tag
  - name: List Templates
    description: List Template tag
  - name: Update Templates
    description: Update Templates tag
  - name: Templates
    description: Templates tag
paths:
  /templates:
    get:
      tags:
        - List Templates
        - Templates
      summary: Get templates from the database
      operationId: getTemplates
      description: 'Get templates from the database based on the id provided in the body. If is a normal user returns his templates, if it is an admin returns all of them'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
      responses:
        '200':
          description: templates retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_TEMPLATES_FOUND
                    status: ok
                    templates: {}
        '204':
          description: No templates found
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_NOT_TEMPLATES_FOUND
                    status: error
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: error
                    status: T_BAD_REQ
                Example 2:
                  value:
                    message: error
                    status: T_BODY_EMPTY
                Example 3:
                  value:
                    message: error
                    status: T_USER_ID_REQ
        '404':
          description: The user does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: error
                    status: T_USER_NOT_FOUND
      x-internal: false
    post:
      tags:
        - Create Templates
        - Templates
      summary: Create a new template
      operationId: postTemplates
      description: Create a template by the data given in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                technology:
                  type: string
                tech_type:
                  type: string
                template_data:
                  type: object
                  properties:
                    app_name:
                      type: string
              x-examples:
                Example 1:
                  user_id: 1
                  technology: flask
                  tech_type: services
                  template_data:
                    app_name: flaskServices
      responses:
        '201':
          description: Template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_TEMPLATE_CREATED
                    status: ok
                    data: aws_key
                    template_id: 2
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: error
                    status: T_USER_ID_REQ
                Example 2:
                  value:
                    message: error
                    status: T_BODY_EMPTY
                Example 3:
                  value:
                    message: error
                    status: T_BAD_REQ
                Example 4:
                  value:
                    message: error
                    status: T_TECH_REQ
                Example 5:
                  value:
                    message: error
                    status: T_TECH_TYPE_REQ
        '404':
          description: User doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: error
                    status: T_USER_NOT_FOUND
        '500':
          description: The template cannot be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: error
                    status: T_TEMPLATE_STORE_ERROR
                Example 2:
                  value:
                    message: error
                    status: T_TEMPLATE_CREATION_ERROR
  '/templates/{templateId}':
    parameters:
      - schema:
          type: integer
        description: template Identifier
        name: templateId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - List Templates
        - Templates
      responses:
        '200':
          description: Template found with the templateId and the userId given
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_TEMPLATE_FOUND
                    status: ok
                    template: {}
        '400':
          description: 'Bad Request --> Body, userId or templateId not given'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_BAD_REQ
                    status: error
                Example 2:
                  value:
                    message: T_BODY_EMPTY
                    status: error
                Example 3:
                  value:
                    message: T_USER_ID_REQ
                    status: error
        '403':
          description: The user does not have access to the template requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_UNAUTHORIZED
                    status: error
        '404':
          description: The user or the template does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_NOT_FOUND
                    status: error
      operationId: get-templates-templateId
      description: Retrieve a specific template based on the id and the user id passed on the body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
      parameters: []
  '/templates/{templateId}/update':
    parameters:
      - schema:
          type: string
        name: templateId
        in: path
        required: true
        description: Template Id
    put:
      tags:
        - Update Templates
        - Templates
      summary: Update a template
      operationId: put-templates-templatesId-update
      responses:
        '200':
          description: The template is updated sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_TEMPLATE_CREATED
                    status: ok
                    data: aws_key
        '400':
          description: 'Bad Request --> Body, userId or templateId not given'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_BAD_REQ
                    status: error
                Example 2:
                  value:
                    message: T_BODY_EMPTY
                    status: error
                Example 3:
                  value:
                    message: T_USER_ID_REQ
                    status: error
                Example 4:
                  value:
                    message: T_TECH_TYPE_REQ
                    status: error
                Example 5:
                  value:
                    message: T_TEMPLATE_DATA_REQ
                    status: error
        '403':
          description: The user has no access to the template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_UNAUTHORIZED
                    status: error
        '404':
          description: The user or the template does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_NOT_FOUND
                    status: error
        '500':
          description: The template couldn't be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_TEMPLATE_NOT_UPDATED
                    status: error
                Example 2:
                  value:
                    message: T_TEMPLATE_NOT_CREATED
                    status: error
      description: Update a the template refered by the templateId and the userId in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                template_data:
                  type: object
                create_temp:
                  type: boolean
            examples:
              Example 1:
                value:
                  user_id: 5
                  template_data: {}
                  create_temp: true
        description: ''
      parameters: []
  '/templates/{templateId}/delete':
    parameters:
      - schema:
          type: string
        name: templateId
        in: path
        required: true
        description: Template Id
    delete:
      tags:
        - Delete Templates
        - Templates
      summary: Delete a template
      operationId: delete-templates-templatesId-delete
      responses:
        '200':
          description: Template deleted succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: OK
                    message: The template was deleted succesfully
                    code: 200
        '400':
          description: 'Body, or userId not provided'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The user_id is required
                    code: 400
                Example 2:
                  value:
                    status: error
                    message: The request's body is empty
                    code: 400
                Example 3:
                  value:
                    status: error
                    message: No body provided
                    code: 400
        '403':
          description: The user does not have access to the template
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The user does not have access to the template
                    code: 403
        '404':
          description: The user or the template does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The user or the template does not exist
                    code: 404
        '500':
          description: The template wasn't deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The template couldn't be deleted
                    code: 500
      description: Delete the template refered by the templateId and the userId in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
            examples:
              Example 1:
                value:
                  user_id: 4
              Example 2:
                value:
                  user_id: 12
              Example 3:
                value:
                  user_id: 43
      parameters: []
  '/templates/{templateId}/create':
    parameters:
      - schema:
          type: string
        description: Template Identificator
        name: templateId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-templates-templateId-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: OK
                    message: The template was succesfully created
                    code: 200
        '400':
          description: Body or userId not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The body is missing
                    code: 400
                Example 2:
                  value:
                    status: error
                    message: The body is empty
                    code: 400
                Example 3:
                  value:
                    status: error
                    message: The user_id is missing
                    code: 400
        '403':
          description: The user has no access to the template
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The user has no access to the template
                    code: 403
        '404':
          description: The user or the template does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The user or the template does not exist
                    code: 404
        '500':
          description: The template couldnt be created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  code:
                    type: integer
              examples:
                Example 1:
                  value:
                    status: error
                    message: The template couldn't be created
                    code: 500
      description: Create again a template refered by the templateId and the userId in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
            examples:
              Example 1:
                value:
                  user_id: 3
              Example 2:
                value:
                  user_id: 43
              Example 3:
                value:
                  user_id: 3
        description: ''
      tags:
        - Create Templates
        - Templates
      parameters: []
  '/users/{userId}/delete':
    parameters:
      - schema:
          type: number
        name: userId
        in: path
        description: User id
        required: true
    delete:
      summary: ''
      operationId: delete-users-userId-delete
      responses:
        '200':
          description: Templates deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_USER_DELETED
                    status: success
        '404':
          description: The user is not found and cant be deleted its templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_USER_FOUND
                    status: error
        '500':
          description: Error on deleting the templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Example 1:
                  value:
                    message: T_INTERNAL_SERVER_ERROR
                    status: error
      description: Endpoint that allow the deletion of the templates stores in the non relational database and then delete the user
      tags:
        - users
        - deleteUser
      parameters: []
  /templates/getTemplateConfig:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-templates-getTemplateConfig
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        username:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
        date:
          type: string
          format: date
          example: '1997-10-31'
        role:
          type: string
          enum:
            - admin
            - client
      required:
        - id
        - username
        - password
        - email
        - date
        - role
      x-stoplight:
        id: 9f72ypxmjsz1e
    Templates:
      title: Templates
      x-stoplight:
        id: 9f72ypxmjsz1e
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        technology:
          type: string
        tech_type:
          type: string
        date_created:
          type: string
          format: date-time
        template_ref:
          type: string
    Response:
      title: Response
      x-stoplight:
        id: 16rajtftxeb63
      type: object
      description: Model that represent the http response but is not a real model
      properties:
        message:
          type: string
          x-stoplight:
            id: ioe8w5d1rta62
          description: The message of the http response
        status:
          type: string
          x-stoplight:
            id: a4xr7kthuvfq4
          description: Not numeric status response
        code:
          type: number
          x-stoplight:
            id: ytg6u8ym6nqmn
          description: Code of the http response
        data:
          type: string
          x-stoplight:
            id: dezlw7mp8lvkj
          description: AWS Token of the created template
        template_id:
          type: number
          x-stoplight:
            id: guvhmf28rho6r
          description: created template's Id
        template:
          type: object
          x-stoplight:
            id: glwqygztd6s7c
          description: Template data
        templates:
          type: object
          x-stoplight:
            id: blo6tty2e1m1d
          description: template Data's array
      required:
        - message
        - status
  responses: {}
x-internal: false
